meta:
  title: "Getting Started with AIGNE Framework | Quickstart Guide"
  description: "Your step-by-step guide to installing the AIGNE Framework. Set up your environment and run your first AI agent in just a few minutes!"
sections:
  - sectionName: "heroQuickstart"
    sectionSummary: "An energetic hero section that immediately shows developers how easy it is to start. It features a welcoming title, an encouraging description, and a simple, complete code example to set the tone."
    heroTitle: "Let's Build Your First AI Agent!"
    heroDescription: "You're just moments away from building powerful, agentic AI applications. This guide gets you installed and running your first AIGNE workflow in no time. Let's dive in!"
    code:
      filename: "basic-usage.ts"
      content: "import { AIAgent, AIGNE } from \"@aigne/core\";\nimport { OpenAIChatModel } from \"@aigne/openai\";\n\n// Create AI model instance\nconst model = new OpenAIChatModel({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\n// Create AI agent\nconst agent = AIAgent.from({\n  name: \"Assistant\",\n  instructions: \"You are a helpful assistant.\",\n});\n\n// AIGNE: Main execution engine of AIGNE Framework.\nconst aigne = new AIGNE({ model });\n\n// Use the AIGNE to invoke the agent\nconst userAgent = await aigne.invoke(agent);\n\n// Send a message to the agent\nconst response = await userAgent.invoke(\n  \"Hello, can you help me write a short article?\",\n);\nconsole.log(response);"
    sectionBackground: "primary.dark"
  - sectionName: "setupGuide"
    sectionSummary: "A clear, multi-step guide that walks developers through prerequisites and installation. It's designed to be scannable and action-oriented, using a list layout to present information cleanly."
    title: "Ready, Set, Go!"
    description: "Getting started is a breeze! Just follow these simple steps to get the AIGNE Framework up and running in your project."
    list:
      - sectionName: "environmentCheck"
        sectionSummary: "A quick-check card for environment prerequisites, ensuring developers have the correct Node.js version before proceeding."
        cardTitle: "Step 1: Check Your Environment"
        cardDescription: "First things first! You'll need Node.js version 20.0 or higher to get started. This ensures everything runs smoothly."
        iconifyIconName: "logos:nodejs-icon"
      - sectionName: "installationCommands"
        sectionSummary: "Provides copy-and-paste ready installation commands for npm, yarn, and pnpm, allowing developers to use their preferred package manager."
        title: "Step 2: Install the Core Package"
        description: "Now for the fun part! Pick your favorite package manager and run the command below to add `@aigne/core` to your project."
        code:
          name: "npm"
          content: "npm install @aigne/core"
      - sectionName: "runYourFirstAgent"
        sectionSummary: "The core of the guide, this section provides a complete, runnable example of creating two agents that interact, showcasing a key framework feature (handoff) to excite the developer."
        title: "Step 3: Run Your First Agent"
        description: "Let's bring your first agents to life! This example shows two agents collaborating: AgentA hands off a task to AgentB, who only speaks in haikus. Copy this code, add your OpenAI API key, and run it to see the magic happen!"
        code:
          name: "/examples/workflow-handoff/usages.ts"
          content: "import { AIAgent, AIGNE } from \"@aigne/core\";\nimport { OpenAIChatModel } from \"@aigne/openai\";\n\nconst { OPENAI_API_KEY } = process.env;\n\nconst model = new OpenAIChatModel({\n  apiKey: OPENAI_API_KEY,\n});\n\nfunction transferToB() {\n  return agentB;\n}\n\nconst agentA = AIAgent.from({\n  name: \"AgentA\",\n  instructions: \"You are a helpful agent.\",\n  outputKey: \"A\",\n  skills: [transferToB],\n  inputKey: \"message\",\n});\n\nconst agentB = AIAgent.from({\n  name: \"AgentB\",\n  instructions: \"Only speak in Haikus.\",\n  outputKey: \"B\",\n  inputKey: \"message\",\n});\n\nconst aigne = new AIGNE({ model });\n\nconst userAgent = aigne.invoke(agentA);\n\nconst result1 = await userAgent.invoke({ message: \"transfer to agent b\" });\nconsole.log(result1);\n// Output:\n// {\n//   B: \"Transfer now complete,  \\nAgent B is here to help.  \\nWhat do you need, friend?\".\n// }\n\nconst result2 = await userAgent.invoke({ message: \"It's a beautiful day\" });\nconsole.log(result2);\n// Output:\n// {\n//   B: \"Sunshine warms the earth,  \\nGentle breeze whispers softly,  \\nNature sings with joy.  \".\n// }"
    action:
      link: ""
      text: ""
  - sectionName: "nextSteps"
    sectionSummary: "A forward-looking CTA section that encourages developers to continue their journey by exploring more advanced topics like workflows and the framework's architecture."
    title: "You're on a Roll! What's Next?"
    description: "Congratulations, you've officially built and run your first AIGNE application! That was just a taste of what's possible. Ready to go deeper? Explore our powerful workflow patterns or get a full picture of the framework's architecture."
    ctaBackground: "grey.100"
    ctaActions:
      - text: "Explore All Workflows"
        link: "link:///workflows"
      - text: "View the Architecture"
        link: "link:///docs/architecture"