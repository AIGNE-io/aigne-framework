import { z } from "zod";
export declare const recordTraceSchema: z.ZodObject<{
    id: z.ZodString;
    rootId: z.ZodString;
    parentId: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    startTime: z.ZodNumber;
    endTime: z.ZodNumber;
    status: z.ZodRecord<z.ZodString, z.ZodAny>;
    attributes: z.ZodRecord<z.ZodString, z.ZodAny>;
    links: z.ZodOptional<z.ZodArray<z.ZodAny, "many">>;
    events: z.ZodOptional<z.ZodArray<z.ZodAny, "many">>;
    userId: z.ZodOptional<z.ZodString>;
    sessionId: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    status: Record<string, any>;
    id: string;
    name: string;
    rootId: string;
    startTime: number;
    endTime: number;
    attributes: Record<string, any>;
    parentId?: string | undefined;
    links?: any[] | undefined;
    events?: any[] | undefined;
    userId?: string | undefined;
    sessionId?: string | undefined;
}, {
    status: Record<string, any>;
    id: string;
    name: string;
    rootId: string;
    startTime: number;
    endTime: number;
    attributes: Record<string, any>;
    parentId?: string | undefined;
    links?: any[] | undefined;
    events?: any[] | undefined;
    userId?: string | undefined;
    sessionId?: string | undefined;
}>;
export type RecordTrace = z.infer<typeof recordTraceSchema>;
export declare const recordTraceBatchSchema: z.ZodArray<z.ZodObject<{
    id: z.ZodString;
    rootId: z.ZodString;
    parentId: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    startTime: z.ZodNumber;
    endTime: z.ZodNumber;
    status: z.ZodRecord<z.ZodString, z.ZodAny>;
    attributes: z.ZodRecord<z.ZodString, z.ZodAny>;
    links: z.ZodOptional<z.ZodArray<z.ZodAny, "many">>;
    events: z.ZodOptional<z.ZodArray<z.ZodAny, "many">>;
    userId: z.ZodOptional<z.ZodString>;
    sessionId: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    status: Record<string, any>;
    id: string;
    name: string;
    rootId: string;
    startTime: number;
    endTime: number;
    attributes: Record<string, any>;
    parentId?: string | undefined;
    links?: any[] | undefined;
    events?: any[] | undefined;
    userId?: string | undefined;
    sessionId?: string | undefined;
}, {
    status: Record<string, any>;
    id: string;
    name: string;
    rootId: string;
    startTime: number;
    endTime: number;
    attributes: Record<string, any>;
    parentId?: string | undefined;
    links?: any[] | undefined;
    events?: any[] | undefined;
    userId?: string | undefined;
    sessionId?: string | undefined;
}>, "many">;
