name: Test Examples

on:
  issue_comment:
    types: [created, edited]
  workflow_dispatch:

jobs:
  check:
    if: |
      github.event.issue.pull_request &&
      startsWith(github.event.comment.body, '/test-examples')
    runs-on: ubuntu-latest
    outputs:
      skip_ci: ${{ steps.check-title.outputs.skip_ci }}
      is_collaborator: ${{ steps.check-collab.outputs.is_collaborator }}

    steps:
      - name: Check if commenter is a collaborator
        id: check-collab
        uses: actions/github-script@v7
        with:
          script: |
            const commenter = context.payload.comment.user.login;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            try {
              await github.rest.repos.checkCollaborator({
                owner,
                repo,
                username: commenter,
              });
              console.log("✅ User is a collaborator.");
              core.setOutput('is_collaborator', 'true');
            } catch (error) {
              console.log("❌ User is NOT a collaborator.");
              core.setOutput('is_collaborator', 'false');
              core.setFailed(`User ${commenter} is not authorized to trigger CI.`);
            }

      - name: Check PR title for [skip ci]
        id: check-title
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.issue.number,
            });

            const title = pr.data.title || '';
            const skip = /\[skip ci\]/i.test(title);
            console.log(`📝 PR Title: "${title}"`);
            if (skip) {
              console.log("🚫 Skip CI detected in PR title.");
            } else {
              console.log("✅ No skip directive found.");
            }

            core.setOutput('skip_ci', skip.toString());

  test-examples:
    needs: check
    if: ${{ needs.check.result == 'success' && needs.check.outputs.skip_ci != 'true' }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - provider: OpenAI
            model: gpt-4.1-mini
          - provider: OpenAI
            model: gpt-4o-mini
          - provider: OpenAI
            model: o3-mini
          - provider: OpenAI
            model: o1-mini
          - provider: Claude
            model: claude-3-7-sonnet-latest
          - provider: Claude
            model: claude-3-5-haiku-latest
          - provider: XAI
            model: grok-3-mini
          - provider: XAI
            model: grok-2-latest
          - provider: Gemini
            model: gemini-2.0-flash
          - provider: Gemini
            model: gemini-1.5-flash
          - provider: DeepSeek
            model: deepseek-chat
          - provider: OpenRouter
            model: openai/gpt-4o

    steps:
      - name: Check if commenter is a repository collaborator
        id: permission-check
        uses: actions/github-script@v7
        with:
          script: |
            const commenter = context.payload.comment.user.login;
            const repoOwner = context.repo.owner;
            const repoName = context.repo.repo;

            try {
              await github.rest.repos.checkCollaborator({
                owner: repoOwner,
                repo: repoName,
                username: commenter,
              });
              console.log(`${commenter} is a collaborator.`);
            } catch (error) {
              core.setFailed(`User ${commenter} is NOT a collaborator.`);
            }

      - name: Checkout repo
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v3
        with:
          version: 10

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Get puppeteer version from @modelcontextprotocol/server-puppeteer
        id: puppeteer-version
        shell: bash
        run: |
          VERSION=$(pnpm view @modelcontextprotocol/server-puppeteer dependencies.puppeteer)
          if [ -z "$VERSION" ]; then
            echo "Error: puppeteer dependency not found in @modelcontextprotocol/server-puppeteer"
            exit 1
          fi
          echo "version=$VERSION" >> ${GITHUB_OUTPUT}
          echo "Puppeteer version: $VERSION"

      - name: Cache Puppeteer
        uses: actions/cache@v4
        id: puppeteer-cache
        with:
          path: ~/.cache/puppeteer
          key: ${{ runner.os }}-puppeteer-cache-${{ steps.puppeteer-version.outputs.version }}
          restore-keys: |
            ${{ runner.os }}-puppeteer-cache-

      - name: Setup bun
        uses: oven-sh/setup-bun@v2

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install dependencies
        run: pnpm install

      - name: Install aigne/cli
        run: |
          pnpm add -g @aigne/cli

      - name: Build
        run: pnpm build

      - name: Run examples
        env:
          INITIAL_CALL: "Hi, this is an initial test. Show your main function by performing a basic task you’re designed for."
          SKIP_LOOP: "true"
          PUPPETEER_LAUNCH_OPTIONS: '{"headless": true, "args": ["--no-sandbox", "--disable-setuid-sandbox"]}'
          ALLOW_DANGEROUS: "true"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MODEL_PROVIDER: ${{ matrix.provider }}
          MODEL_NAME: ${{ matrix.model }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          XAI_API_KEY: ${{ secrets.XAI_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
          OPEN_ROUTER_API_KEY: ${{ secrets.OPEN_ROUTER_API_KEY }}
        run: |
          EXCLUDE_PATTERN="mcp-blocklet\|workflow-group-chat"

          for dir in examples/*; do
            if echo "$dir" | grep -q "$EXCLUDE_PATTERN"; then
              echo "Skipping $dir"
            else
              echo "Testing $dir with $MODEL_PROVIDER:$MODEL_NAME"
              start_time=$(date +%s)
              cd $dir
              pnpm start || exit 1
              cd ../..
              end_time=$(date +%s)
              duration=$((end_time - start_time))
              echo "✅ $dir completed in $duration seconds"
            fi
          done
