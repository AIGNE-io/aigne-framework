meta:
  title: "AIGNE 工作流模式 | 顺序、并发、路由等"
  description: "探索 AIGNE 的强大工作流模式。学习使用 顺序、并发、路由、移交、反思 和 代码执行 模式构建复杂的 AI 应用。包含图表和代码示例。"
sections:
  - name: "hero"
    summary: "对 AIGNE 工作流模式的充满活力且引人入胜的介绍，旨在激发开发者对这些可能性的兴趣。"
    heroTitle: "用强大的工作流模式掌控你的 AI"
    heroDescription: "无需再手动处理复杂逻辑！AIGNE 为你提供一套即插即用的工作流模式，用以像专家一样编排 AI 代理。构建复杂的多步骤应用并让它们可靠运行。下面让我们深入了解如何将你的创意变为现实。"
    action:
      text: "查看所有示例"
      link: "link:///examples"
  - name: "sequentialPattern"
    summary: "解释顺序工作流模式，说明其在有序任务中的使用场景，并提供清晰的代码实现示例。"
    title: "顺序模式：完善流程"
    description: "需要按特定顺序完成任务？顺序模式是你的首选！它创建一个逐步的管道，每个代理在将任务交接给下一个之前完成自己的工作。非常适合多阶段内容生成、数据处理以及任何要求执行顺序的任务。你会喜欢它带来的可控性和可预测性。"
    code:
      name: "sequential-workflow.ts"
      content: "import { AIAgent, AIGNE, ProcessMode, TeamAgent } from \"@aigne/core\";\nimport { OpenAIChatModel } from \"@aigne/core/models/openai-chat-model.js\";\n\nconst { OPENAI_API_KEY } = process.env;\n\nconst model = new OpenAIChatModel({\n  apiKey: OPENAI_API_KEY,\n});\n\nconst conceptExtractor = AIAgent.from({\n  instructions: `\\\nYou are a marketing analyst. Give a product description, identity:\n- Key features\n- Target audience\n- Unique selling points\n\\nProduct description:\n{{product}}`,\n  outputKey: \"concept\",\n});\n\nconst writer = AIAgent.from({\n  instructions: `\\\nYou are a marketing copywriter. Given a block of text describing features, audience, and USPs,\ncompose a compelling marketing copy (like a newsletter section) that highlights these points.\nOutput should be short (around 150 words), output just the copy as a single text block.\n\\nProduct description:\n{{product}}\n\\nBelow is the info about the product:\n{{concept}}`,\n  outputKey: \"draft\",\n});\n\nconst formatProof = AIAgent.from({\n  instructions: `\\\nYou are an editor. Given the draft copy, correct grammar, improve clarity, ensure consistent tone,\ngive format and make it polished. Output the final improved copy as a single text block.\n\\nProduct description:\n{{product}}\n\\nBelow is the info about the product:\n{{concept}}\n\\nDraft copy:\n{{draft}}`,\n  outputKey: \"content\",\n});\n\nconst aigne = new AIGNE({ model });\n\nconst teamAgent = TeamAgent.from({\n  skills: [conceptExtractor, writer, formatProof],\n  mode: ProcessMode.sequential,\n});\n\nconst result = await aigne.invoke(teamAgent, {\n  product: \"AIGNE is a No-code Generative AI Apps Engine\",\n});\n\nconsole.log(result);"
  - name: "concurrencyPattern"
    summary: "详述并发工作流模式，强调其用于并行任务的高效性，并提供同时处理的代码示例。"
    title: "并发模式：极速提升效率"
    description: "为何等待，当你可以同时完成多项工作？并发模式释放并行处理的能力，让多个代理同时处理相互独立的任务。观察应用效率的显著提升！对于并行数据分析或在短时间内获取多维反馈而言，这是一项重要的改进。"
    code:
      name: "concurrency-workflow.ts"
      content: "import { AIAgent, AIGNE, ProcessMode, TeamAgent } from \"@aigne/core\";\nimport { OpenAIChatModel } from \"@aigne/core/models/openai-chat-model.js\";\n\nconst { OPENAI_API_KEY } = process.env;\n\nconst model = new OpenAIChatModel({\n  apiKey: OPENAI_API_KEY,\n});\n\nconst featureExtractor = AIAgent.from({\n  instructions: `\\\nYou are a product analyst. Extract and summarize the key features of the product.\n\\nProduct description:\n{{product}}`,\n  outputKey: \"features\",\n});\n\nconst audienceAnalyzer = AIAgent.from({\n  instructions: `\\\nYou are a market researcher. Identify the target audience for the product.\n\\nProduct description:\n{{product}}`,\n  outputKey: \"audience\",\n});\n\nconst aigne = new AIGNE({ model });\n\nconst teamAgent = TeamAgent.from({\n  skills: [featureExtractor, audienceAnalyzer],\n  mode: ProcessMode.parallel,\n});\n\nconst result = await aigne.invoke(teamAgent, {\n  product: \"AIGNE is a No-code Generative AI Apps Engine\",\n});\n\nconsole.log(result);"
  - name: "routerPattern"
    summary: "介绍路由工作流模式，作为智能请求调度器，说明其使用场景并展示如何用代码片段实现。"
    title: "路由模式：智能流量调度器"
    description: "不同的任务需要不同的专家处理？路由模式充当智能分流器，根据内容自动将传入请求发送给合适的代理。可用于构建出色的客户服务机器人或多才多艺的助手，总是知道该呼叫谁来处理问题。看到它运行会很令人满意。"
    code:
      name: "router-workflow.ts"
      content: "import { AIAgent, AIGNE } from \"@aigne/core\";\nimport { OpenAIChatModel } from \"@aigne/core/models/openai-chat-model.js\";\n\nconst { OPENAI_API_KEY } = process.env;\n\nconst model = new OpenAIChatModel({ apiKey: OPENAI_API_KEY });\n\nconst productSupport = AIAgent.from({ name: \"product_support\", description: \"Agent to assist with any product-related questions.\", instructions: `You are an agent capable of handling any product-related questions.` });\nconst feedback = AIAgent.from({ name: \"feedback\", description: \"Agent to assist with any feedback-related questions.\", instructions: `You are an agent capable of handling any feedback-related questions.` });\nconst other = AIAgent.from({ name: \"other\", description: \"Agent to assist with any general questions.\", instructions: `You are an agent capable of handling any general questions.` });\n\nconst triage = AIAgent.from({\n  name: \"triage\",\n  instructions: `You are an agent capable of routing questions to the appropriate agent.`,\n  skills: [productSupport, feedback, other],\n  toolChoice: \"router\",\n});\n\nconst aigne = new AIGNE({ model });\n\nconst result = await aigne.invoke(triage, \"How to use this product?\");\nconsole.log(result);"
  - name: "handoffPattern"
    summary: "描述移交工作流模式，用于实现专长代理之间的无缝协作，并附带实用的代码示例。"
    title: "移交模式：无缝的团队协作"
    description: "让你的专长代理协同工作！移交模式可实现从一个代理到另一个代理的顺畅控制转移，组成动态组合以解决复杂问题。它就像随时可用的专家顾问，准备在需要时介入。协作的可能性无限。"
    code:
      name: "handoff-workflow.ts"
      content: "import { AIAgent, AIGNE } from \"@aigne/core\";\nimport { OpenAIChatModel } from \"@aigne/core/models/openai-chat-model.js\";\n\nconst { OPENAI_API_KEY } = process.env;\n\nconst model = new OpenAIChatModel({ apiKey: OPENAI_API_KEY });\n\nfunction transfer_to_b() {\n  return agentB;\n}\n\nconst agentA = AIAgent.from({\n  name: \"AgentA\",\n  instructions: \"You are a helpful agent.\",\n  outputKey: \"A\",\n  skills: [transfer_to_b],\n});\n\nconst agentB = AIAgent.from({\n  name: \"AgentB\",\n  instructions: \"Only speak in Haikus.\",\n  outputKey: \"B\",\n});\n\nconst aigne = new AIGNE({ model });\n\nconst userAgent = aigne.invoke(agentA);\n\nconst result1 = await userAgent.invoke(\"transfer to agent b\");\nconsole.log(result1);"
  - name: "reflectionPattern"
    summary: "解释反思工作流模式，使代理能够迭代地审查和改进工作，并通过反馈循环的代码示例加以演示。"
    title: "反思模式：会学习并改进的 AI"
    description: "构建随着时间变得更智能的代理！反思模式建立强大的反馈循环，一个代理的工作会由另一个代理审查并改进。此迭代过程非常适合代码审查或内容质量控制，确保最终产出经过润色。你会对所能达到的质量印象深刻。"
    code:
      name: "reflection-workflow.ts"
      content: "import { AIAgent, AIGNE, UserInputTopic, UserOutputTopic } from \"@aigne/core\";\nimport { OpenAIChatModel } from \"@aigne/core/models/openai-chat-model.js\";\nimport { z } from \"zod\";\n\nconst { OPENAI_API_KEY } = process.env;\nconst model = new OpenAIChatModel({ apiKey: OPENAI_API_KEY });\n\nconst coder = AIAgent.from({\n  subscribeTopic: [UserInputTopic, \"rewrite_request\"],\n  publishTopic: \"review_request\",\n  instructions: `You are a proficient coder. You write code to solve problems. Work with the reviewer to improve your code.`,\n  outputSchema: z.object({ code: z.string().describe(\"Your code\") }),\n});\n\nconst reviewer = AIAgent.from({\n  subscribeTopic: \"review_request\",\n  publishTopic: (output) => output.approval ? UserOutputTopic : \"rewrite_request\",\n  instructions: `You are a code reviewer. You focus on correctness, efficiency and safety of the code.`,\n  outputSchema: z.object({\n    approval: z.boolean().describe(\"APPROVE or REVISE\"),\n    feedback: z.object({\n      correctness: z.string().describe(\"Your comments on correctness\"),\n      efficiency: z.string().describe(\"Your comments on efficiency\"),\n      safety: z.string().describe(\"Your comments on safety\"),\n      suggested_changes: z.string().describe(\"Your comments on suggested changes\"),\n    }),\n  }),\n  includeInputInOutput: true,\n});\n\nconst aigne = new AIGNE({ model, agents: [coder, reviewer] });\naigne.publish(UserInputTopic, \"Write a function to find the sum of all even numbers in a list.\");\n\nconst { message } = await aigne.subscribe(UserOutputTopic);\nconsole.log(message);"
  - name: "codeExecutionPattern"
    summary: "展示代码执行模式，说明如何在沙箱中安全运行动态生成的代码，并提供完整的代码示例。"
    title: "代码执行：让你的逻辑变为现实"
    description: "准备好发挥真正的能力了吗？代码执行模式允许你的 AI 动态生成并在安全沙箱中运行代码。这为自动化带来强大能力，从解决复杂算法问题到执行即时数据分析。它是代理的强大功能。"
    code:
      name: "code-execution-workflow.ts"
      content: "import { AIAgent, AIGNE, FunctionAgent } from \"@aigne/core\";\nimport { OpenAIChatModel } from \"@aigne/core/models/openai-chat-model.js\";\nimport { z } from \"zod\";\n\nconst { OPENAI_API_KEY } = process.env;\n\nconst model = new OpenAIChatModel({ apiKey: OPENAI_API_KEY });\n\nconst sandbox = FunctionAgent.from({\n  name: \"evaluateJs\",\n  description: \"A js sandbox for running javascript code\",\n  inputSchema: z.object({ code: z.string().describe(\"The code to run\") }),\n  process: async (input: { code: string }) => {\n    const { code } = input;\n    const result = eval(code);\n    return { result };\n  },\n});\n\nconst coder = AIAgent.from({\n  name: \"coder\",\n  instructions: `You are a proficient coder. You write code to solve problems. Work with the sandbox to execute your code.`,\n  skills: [sandbox],\n});\n\nconst aigne = new AIGNE({ model });\n\nconst result = await aigne.invoke(coder, \"10! = ?\");\nconsole.log(result);"
  - name: "cta"
    summary: "最后的号召性用语，鼓励开发者开始使用刚学到的工作流模式进行构建。"
    title: "准备好构建你的杰作了吗？"
    description: "你已经了解了这些模式，现在轮到你去创造令人惊叹的作品。获取这些示例，开始实验，看看使用 AIGNE 能构建出哪些强大的代理工作流。"
    ctaAction:
      text: "探索所有示例"
      link: "link:///examples"