meta:
  title: "AIGNE Workflow Patterns | Sequential, Concurrent, Router & More"
  description: "Discover AIGNE's powerful workflow patterns. Learn to build complex AI applications with Sequential, Concurrent, Router, Handoff, Reflection, and Code Execution patterns. Includes diagrams and code examples."
sections:
  - name: "hero"
    summary: "An energetic and engaging introduction to AIGNE's workflow patterns, designed to excite developers about the possibilities."
    heroTitle: "Master Your AI with Powerful Workflow Patterns"
    heroDescription: "Stop juggling complex logic! AIGNE gives you a toolkit of plug-and-play workflow patterns to orchestrate AI agents like a pro. Build sophisticated, multi-step applications that just work. Let's dive in and see how you can bring your most ambitious ideas to life!"
    action:
      text: "See All Examples"
      link: "link:///examples"
  - name: "sequentialPattern"
    summary: "Explains the Sequential workflow pattern, detailing its use cases for ordered tasks and providing a clear code example for implementation."
    title: "Sequential Pattern: Perfecting the Process"
    description: "Need things done in a specific order? The Sequential pattern is your go-to! It creates a perfect, step-by-step pipeline where each agent completes its task before passing the baton to the next. Itâ€™s ideal for multi-stage content generation, data processing, and any task that demands a guaranteed execution order. You'll love the control and predictability!"
    code:
      name: "sequential-workflow.ts"
      content: "import { AIAgent, AIGNE, ProcessMode, TeamAgent } from \"@aigne/core\";\nimport { OpenAIChatModel } from \"@aigne/core/models/openai-chat-model.js\";\n\nconst { OPENAI_API_KEY } = process.env;\n\nconst model = new OpenAIChatModel({\n  apiKey: OPENAI_API_KEY,\n});\n\nconst conceptExtractor = AIAgent.from({\n  instructions: `\\\nYou are a marketing analyst. Give a product description, identity:\\n- Key features\\n- Target audience\\n- Unique selling points\\n\\nProduct description:\\n{{product}}`,\n  outputKey: \"concept\",\n});\n\nconst writer = AIAgent.from({\n  instructions: `\\\nYou are a marketing copywriter. Given a block of text describing features, audience, and USPs,\\ncompose a compelling marketing copy (like a newsletter section) that highlights these points.\\nOutput should be short (around 150 words), output just the copy as a single text block.\\n\\nProduct description:\\n{{product}}\\n\\nBelow is the info about the product:\\n{{concept}}`,\n  outputKey: \"draft\",\n});\n\nconst formatProof = AIAgent.from({\n  instructions: `\\\nYou are an editor. Given the draft copy, correct grammar, improve clarity, ensure consistent tone,\\ngive format and make it polished. Output the final improved copy as a single text block.\\n\\nProduct description:\\n{{product}}\\n\\nBelow is the info about the product:\\n{{concept}}\\n\\nDraft copy:\\n{{draft}}`,\n  outputKey: \"content\",\n});\n\nconst aigne = new AIGNE({ model });\n\nconst teamAgent = TeamAgent.from({\n  skills: [conceptExtractor, writer, formatProof],\n  mode: ProcessMode.sequential,\n});\n\nconst result = await aigne.invoke(teamAgent, {\n  product: \"AIGNE is a No-code Generative AI Apps Engine\",\n});\n\nconsole.log(result);"
  - name: "concurrencyPattern"
    summary: "Details the Concurrency workflow pattern, highlighting its efficiency for parallel tasks and providing a code example for simultaneous processing."
    title: "Concurrency Pattern: Supercharge Your Speed"
    description: "Why wait when you can do it all at once? The Concurrency pattern unleashes the power of parallel processing, letting multiple agents tackle independent tasks simultaneously. Watch your application's efficiency skyrocket! It's a game-changer for parallel data analysis or getting multi-dimensional feedback in a flash."
    code:
      name: "concurrency-workflow.ts"
      content: "import { AIAgent, AIGNE, ProcessMode, TeamAgent } from \"@aigne/core\";\nimport { OpenAIChatModel } from \"@aigne/core/models/openai-chat-model.js\";\n\nconst { OPENAI_API_KEY } = process.env;\n\nconst model = new OpenAIChatModel({\n  apiKey: OPENAI_API_KEY,\n});\n\nconst featureExtractor = AIAgent.from({\n  instructions: `\\\nYou are a product analyst. Extract and summarize the key features of the product.\\n\\nProduct description:\\n{{product}}`,\n  outputKey: \"features\",\n});\n\nconst audienceAnalyzer = AIAgent.from({\n  instructions: `\\\nYou are a market researcher. Identify the target audience for the product.\\n\\nProduct description:\\n{{product}}`,\n  outputKey: \"audience\",\n});\n\nconst aigne = new AIGNE({ model });\n\nconst teamAgent = TeamAgent.from({\n  skills: [featureExtractor, audienceAnalyzer],\n  mode: ProcessMode.parallel,\n});\n\nconst result = await aigne.invoke(teamAgent, {\n  product: \"AIGNE is a No-code Generative AI Apps Engine\",\n});\n\nconsole.log(result);"
  - name: "routerPattern"
    summary: "Introduces the Router workflow pattern as an intelligent request director, explaining its use cases and showing how to implement it with a code snippet."
    title: "Router Pattern: The Smart Traffic Director"
    description: "Got different tasks for different specialists? The Router pattern acts as an intelligent traffic cop, automatically directing incoming requests to the right agent based on the content. Build brilliant customer service bots or multi-talented assistants that always know who to call for the job. It's so satisfying to see it in action!"
    code:
      name: "router-workflow.ts"
      content: "import { AIAgent, AIGNE } from \"@aigne/core\";\nimport { OpenAIChatModel } from \"@aigne/core/models/openai-chat-model.js\";\n\nconst { OPENAI_API_KEY } = process.env;\n\nconst model = new OpenAIChatModel({ apiKey: OPENAI_API_KEY });\n\nconst productSupport = AIAgent.from({ name: \"product_support\", description: \"Agent to assist with any product-related questions.\", instructions: `You are an agent capable of handling any product-related questions.` });\nconst feedback = AIAgent.from({ name: \"feedback\", description: \"Agent to assist with any feedback-related questions.\", instructions: `You are an agent capable of handling any feedback-related questions.` });\nconst other = AIAgent.from({ name: \"other\", description: \"Agent to assist with any general questions.\", instructions: `You are an agent capable of handling any general questions.` });\n\nconst triage = AIAgent.from({\n  name: \"triage\",\n  instructions: `You are an agent capable of routing questions to the appropriate agent.`,\n  skills: [productSupport, feedback, other],\n  toolChoice: \"router\",\n});\n\nconst aigne = new AIGNE({ model });\n\nconst result = await aigne.invoke(triage, \"How to use this product?\");\nconsole.log(result);"
  - name: "handoffPattern"
    summary: "Describes the Handoff workflow pattern for seamless collaboration between specialized agents, complete with a practical code example."
    title: "Handoff Pattern: Seamless Team Collaboration"
    description: "Let your specialized agents team up! The Handoff pattern enables a smooth transfer of control from one agent to another, creating a dynamic duo (or trio!) to solve complex problems. It's like having an expert consultant on call, ready to jump in when needed. The collaborative possibilities are endless!"
    code:
      name: "handoff-workflow.ts"
      content: "import { AIAgent, AIGNE } from \"@aigne/core\";\nimport { OpenAIChatModel } from \"@aigne/core/models/openai-chat-model.js\";\n\nconst { OPENAI_API_KEY } = process.env;\n\nconst model = new OpenAIChatModel({ apiKey: OPENAI_API_KEY });\n\nfunction transfer_to_b() {\n  return agentB;\n}\n\nconst agentA = AIAgent.from({\n  name: \"AgentA\",\n  instructions: \"You are a helpful agent.\",\n  outputKey: \"A\",\n  skills: [transfer_to_b],\n});\n\nconst agentB = AIAgent.from({\n  name: \"AgentB\",\n  instructions: \"Only speak in Haikus.\",\n  outputKey: \"B\",\n});\n\nconst aigne = new AIGNE({ model });\n\nconst userAgent = aigne.invoke(agentA);\n\nconst result1 = await userAgent.invoke(\"transfer to agent b\");\nconsole.log(result1);"
  - name: "reflectionPattern"
    summary: "Explains the Reflection workflow pattern, which enables agents to review and improve work iteratively, supported by a code example for a feedback loop."
    title: "Reflection Pattern: AI That Learns and Improves"
    description: "Build agents that get smarter over time! The Reflection pattern creates a powerful feedback loop, where one agent's work is reviewed and refined by another. This iterative process is perfect for tasks like code reviews or content quality control, ensuring your final output is polished to perfection. You'll be amazed at the quality you can achieve."
    code:
      name: "reflection-workflow.ts"
      content: "import { AIAgent, AIGNE, UserInputTopic, UserOutputTopic } from \"@aigne/core\";\nimport { OpenAIChatModel } from \"@aigne/core/models/openai-chat-model.js\";\nimport { z } from \"zod\";\n\nconst { OPENAI_API_KEY } = process.env;\nconst model = new OpenAIChatModel({ apiKey: OPENAI_API_KEY });\n\nconst coder = AIAgent.from({\n  subscribeTopic: [UserInputTopic, \"rewrite_request\"],\n  publishTopic: \"review_request\",\n  instructions: `You are a proficient coder. You write code to solve problems. Work with the reviewer to improve your code.`,\n  outputSchema: z.object({ code: z.string().describe(\"Your code\") }),\n});\n\nconst reviewer = AIAgent.from({\n  subscribeTopic: \"review_request\",\n  publishTopic: (output) => output.approval ? UserOutputTopic : \"rewrite_request\",\n  instructions: `You are a code reviewer. You focus on correctness, efficiency and safety of the code.`,\n  outputSchema: z.object({\n    approval: z.boolean().describe(\"APPROVE or REVISE\"),\n    feedback: z.object({\n      correctness: z.string().describe(\"Your comments on correctness\"),\n      efficiency: z.string().describe(\"Your comments on efficiency\"),\n      safety: z.string().describe(\"Your comments on safety\"),\n      suggested_changes: z.string().describe(\"Your comments on suggested changes\"),\n    }),\n  }),\n  includeInputInOutput: true,\n});\n\nconst aigne = new AIGNE({ model, agents: [coder, reviewer] });\naigne.publish(UserInputTopic, \"Write a function to find the sum of all even numbers in a list.\");\n\nconst { message } = await aigne.subscribe(UserOutputTopic);\nconsole.log(message);"
  - name: "codeExecutionPattern"
    summary: "Presents the Code Execution pattern, showcasing how to safely run dynamically generated code in a sandbox, with a complete code example."
    title: "Code Execution: Bring Your Logic to Life"
    description: "Ready for some real power? The Code Execution pattern lets your AI dynamically generate and run code in a secure sandbox. This unlocks incredible automation capabilities, from solving complex algorithmic problems to performing on-the-fly data analysis. Itâ€™s your agent's superpower!"
    code:
      name: "code-execution-workflow.ts"
      content: "import { AIAgent, AIGNE, FunctionAgent } from \"@aigne/core\";\nimport { OpenAIChatModel } from \"@aigne/core/models/openai-chat-model.js\";\nimport { z } from \"zod\";\n\nconst { OPENAI_API_KEY } = process.env;\n\nconst model = new OpenAIChatModel({ apiKey: OPENAI_API_KEY });\n\nconst sandbox = FunctionAgent.from({\n  name: \"evaluateJs\",\n  description: \"A js sandbox for running javascript code\",\n  inputSchema: z.object({ code: z.string().describe(\"The code to run\") }),\n  process: async (input: { code: string }) => {\n    const { code } = input;\n    const result = eval(code);\n    return { result };\n  },\n});\n\nconst coder = AIAgent.from({\n  name: \"coder\",\n  instructions: `You are a proficient coder. You write code to solve problems. Work with the sandbox to execute your code.`,\n  skills: [sandbox],\n});\n\nconst aigne = new AIGNE({ model });\n\nconst result = await aigne.invoke(coder, \"10! = ?\");\nconsole.log(result);"
  - name: "cta"
    summary: "A final, energetic call-to-action that encourages developers to start building with the workflow patterns they've just learned about."
    title: "Ready to Build Your Masterpiece?"
    description: "You've seen the patterns, now it's your turn to create something amazing. Grab these examples, start experimenting, and see what incredible agentic workflows you can build with AIGNE."
    ctaAction:
      text: "Explore All Examples"
      link: "link:///examples"
