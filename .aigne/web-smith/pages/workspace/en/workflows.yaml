meta:
  title: "AIGNE Workflow Patterns | Build Complex AI Logic with Ease"
  description: "Discover AIGNE's powerful workflow patterns! From sequential and concurrent to router and reflection, learn how to orchestrate sophisticated AI agents and build complex application logic with clear examples and diagrams."
  image: "mediakit://aigne-framework.png"
sections:
  - sectionName: "hero"
    sectionSummary: "An energetic introduction to AIGNE's workflow patterns, designed to capture developer interest by highlighting the power and flexibility of building complex AI logic."
    heroTitle: "Unleash Powerful AI Logic with AIGNE Workflows"
    heroDescription: "Stop wrestling with complex logic! AIGNE gives you a toolkit of plug-and-play workflow patterns to build sophisticated, multi-agent applications. Whether you need step-by-step pipelines, parallel processing, or intelligent routing, you'll find the perfect pattern to bring your ideas to life."
    actions:
      - text: "See The Code"
        link: "link:///examples"
      - text: "Read The Docs"
        link: "link:///docs"
    sectionBackground: "linear-gradient(to bottom, #1e1e1e, #121212)"
  - sectionName: "sequentialWorkflow"
    sectionSummary: "Details the Sequential workflow pattern, explaining its use case for ordered tasks and showcasing its structure with a Mermaid diagram to provide a clear, technical visualization for developers."
    title: "Sequential Workflow: Step-by-Step Precision"
    description: "Perfect for tasks that need a specific order of operations. Build powerful pipelines where the output of one agent becomes the input for the next. It's ideal for content generation, multi-stage data processing, or any task that requires guaranteed execution order. You'll love the control and predictability!"
    code:
      name: "Sequential Flow Diagram"
      content: "flowchart LR\nin(In) --> conceptExtractor(Concept Extractor) --> writer(Writer) --> formatProof(Format Proof) --> out(Out)"
  - sectionName: "concurrentWorkflow"
    sectionSummary: "Explains the Concurrent workflow pattern, focusing on the benefit of parallel processing for efficiency. It includes a Mermaid diagram to illustrate how multiple tasks can be handled simultaneously."
    title: "Concurrent Workflow: Unleash Parallel Power"
    description: "Why wait? Process multiple independent tasks at the same time to boost efficiency. This pattern is a game-changer for parallel data analysis, running multiple evaluations at once, or any scenario where speed is critical. Get results faster and optimize your application's performance!"
    code:
      name: "Concurrent Flow Diagram"
      content: "flowchart LR\nin(In) --> featureExtractor(Feature Extractor) --> aggregator(Aggregator)\nin --> audienceAnalyzer(Audience Analyzer) --> aggregator\naggregator --> out(Out)"
  - sectionName: "routerWorkflow"
    sectionSummary: "Showcases the Router workflow for intelligent request handling. The description and diagram demonstrate how to direct tasks to specialized agents, a key feature for building adaptive applications."
    title: "Router Workflow: Intelligent Task Routing"
    description: "Let your application make smart decisions! The Router pattern directs incoming requests to the right specialized agent based on the content. It's the secret behind intelligent customer service bots, multi-functional assistants, and dynamic response systems. Build apps that adapt and respond with precision."
    code:
      name: "Router Flow Diagram"
      content: "flowchart LR\nin(In) ==> triage(Triage)\ntriage ==> productSupport(Product Support) ==> out(Out)\ntriage -.-> feedback(Feedback) -.-> out\ntriage -.-> other(Other) -.-> out"
  - sectionName: "handoffWorkflow"
    sectionSummary: "Illustrates the Handoff workflow, emphasizing seamless collaboration between different agents. The content and diagram explain how control is transferred to solve complex, multi-stage problems."
    title: "Handoff Workflow: Seamless Agent Collaboration"
    description: "Create a team of specialized AI experts! The Handoff pattern allows one agent to pass control to another, enabling them to collaborate on complex problems. Perfect for building systems where different agents handle different stages of a task, creating a seamless and powerful user experience."
    code:
      name: "Handoff Flow Diagram"
      content: "flowchart LR\nin(In) --> agentA(Agent A) --transfer to b--> agentB(Agent B) --> out(Out)"
  - sectionName: "reflectionWorkflow"
    sectionSummary: "Describes the Reflection workflow pattern, focusing on its capability for self-improvement through a feedback loop. This section highlights its use in quality control and iterative refinement."
    title: "Reflection Workflow: Self-Improving AI"
    description: "Build agents that learn and improve. The Reflection pattern enables a workflow where one agent's output is reviewed and refined by another, creating a feedback loop for quality control. It's perfect for code reviews, content editing, and any process that requires iterative improvement."
    code:
      name: "Reflection Flow Diagram"
      content: "flowchart LR\nin(In) --Ideas--> coder(Coder) ==Solution==> reviewer(Reviewer) --Approved--> out(Out)\nreviewer ==Rejected==> coder"
  - sectionName: "codeExecutionWorkflow"
    sectionSummary: "Introduces the powerful Code Execution workflow, allowing AIs to run code in a sandbox. This section appeals to developers by showing how to build agents that can perform computations and automated tasks."
    title: "Code Execution: Bring Your Logic to Life"
    description: "Go beyond conversation and empower your agents to take action. This workflow allows your AI to dynamically generate and execute code in a secure sandbox. Solve complex calculations, automate data analysis, and build truly powerful, autonomous agents that can solve problems on the fly."
    code:
      name: "Code Execution Flow Diagram"
      content: "flowchart LR\nin(In) ==> coder(Coder) ==> out(Out)\ncoder -.-> sandbox(Sandbox)\nsandbox -.-> coder"
  - sectionName: "finalCta"
    sectionSummary: "A compelling call-to-action that motivates developers to apply their newfound knowledge of workflows by exploring practical examples or starting to build immediately with the official documentation."
    title: "Ready to Build Your Masterpiece?"
    description: "You've seen the patterns, now it's time to create! Dive into our examples to see these workflows in action or head straight to the documentation to start building your own complex AI applications with AIGNE."
    ctaActions:
      - text: "Explore Examples"
        link: "link:///examples"
      - text: "Start Building Now"
        link: "link:///docs/getting-started"
    ctaBackground: "grey.100"