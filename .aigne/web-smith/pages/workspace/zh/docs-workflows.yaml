meta:
  title: "AIGNE 工作流模式 | 顺序、并行、路由等"
  description: "探索 AIGNE 强大的工作流模式。学习如何使用顺序、并行、路由、交接、反思与代码执行等模式，通过清晰的图示和代码示例构建复杂的 AI 应用。"
  image: "mediakit://aigne-framework.png"
sections:
  - name: "hero"
    summary: "对 AIGNE 工作流模式的生动且引导性的介绍，旨在激发开发者对构建复杂 AI 应用所带来创意可能性的兴趣。"
    title: "用强大的工作流模式掌控你的 AI"
    description: "无需再为复杂逻辑烦恼。AIGNE 为你提供一套动态的工作流模式工具，便于构建复杂的多代理应用。将这些模式视为创建可靠 AI 系统的实用手册。下面一起查看如何将最具野心的想法变为现实。"
    action:
      text: "查看所有示例"
      link: "link:///examples"
  - name: "sequentialPattern"
    summary: "说明顺序（Sequential）工作流模式，详述其在有序任务中的适用场景。包含示意图说明和完整代码示例，演示如何构建逐步处理管道。"
    title: "顺序（Sequential）：逐步执行的强大模式"
    description: "需要按特定顺序完成任务？顺序模式适合你。它创建一个清晰、可预测的管道，每个代理在将控制权传递给下一个之前完成其任务。非常适合内容创建工作流、多阶段数据处理以及任何需要线性流程的场景，带来更多可控性和清晰性。"
    code:
      filename: "/examples/workflow-sequential/example.ts"
      content: "import { AIAgent, AIGNE, ProcessMode, TeamAgent } from \"@aigne/core\";\nimport { OpenAIChatModel } from \"@aigne/core/models/openai-chat-model.js\";\n\nconst { OPENAI_API_KEY } = process.env;\n\nconst model = new OpenAIChatModel({\n  apiKey: OPENAI_API_KEY,\n});\n\nconst conceptExtractor = AIAgent.from({\n  instructions: `\\\nYou are a marketing analyst. Give a product description, identity:\\n- Key features\\n- Target audience\\n- Unique selling points\\n\\nProduct description:\\n{{product}}`,\n  outputKey: \"concept\",\n});\n\nconst writer = AIAgent.from({\n  instructions: `\\\nYou are a marketing copywriter. Given a block of text describing features, audience, and USPs,\\ncompose a compelling marketing copy (like a newsletter section) that highlights these points.\\nOutput should be short (around 150 words), output just the copy as a single text block.\\n\\nProduct description:\\n{{product}}\\n\\nBelow is the info about the product:\\n{{concept}}`,\n  outputKey: \"draft\",\n});\n\nconst formatProof = AIAgent.from({\n  instructions: `\\\nYou are an editor. Given the draft copy, correct grammar, improve clarity, ensure consistent tone,\\ngive format and make it polished. Output the final improved copy as a single text block.\\n\\nProduct description:\\n{{product}}\\n\\nBelow is the info about the product:\\n{{concept}}\\n\\nDraft copy:\\n{{draft}}`,\n  outputKey: \"content\",\n});\n\nconst aigne = new AIGNE({ model });\n\nconst teamAgent = TeamAgent.from({\n  skills: [conceptExtractor, writer, formatProof],\n  mode: ProcessMode.sequential, // This ensures tasks run one after another\n});\n\nconst result = await aigne.invoke(teamAgent, {\n  product: \"AIGNE is a No-code Generative AI Apps Engine\",\n});\n\nconsole.log(result.content);"
  - name: "concurrentPattern"
    summary: "介绍并行（Concurrent）工作流模式，用于并行执行任务。强调性能优势，给出使用场景，并包含示例代码，演示如何同时处理多个任务。"
    title: "并行（Concurrency）：释放并行处理能力"
    description: "无需等待序列完成即可同时处理多个任务。并行模式可同时运行多个相互独立的任务，显著减少处理时间并提升应用效率。适用于并行数据分析、多维内容评估或任何以速度为核心的场景。"
    code:
      filename: "/examples/workflow-concurrency/example.ts"
      content: "import { AIAgent, AIGNE, ProcessMode, TeamAgent } from \"@aigne/core\";\nimport { OpenAIChatModel } from \"@aigne/core/models/openai-chat-model.js\";\n\nconst { OPENAI_API_KEY } = process.env;\n\nconst model = new OpenAIChatModel({\n  apiKey: OPENAI_API_KEY,\n});\n\nconst featureExtractor = AIAgent.from({\n  instructions: `\\\nYou are a product analyst. Extract and summarize the key features of the product.\\n\\nProduct description:\\n{{product}}`,\n  outputKey: \"features\",\n});\n\nconst audienceAnalyzer = AIAgent.from({\n  instructions: `\\\nYou are a market researcher. Identify the target audience for the product.\\n\\nProduct description:\\n{{product}}`,\n  outputKey: \"audience\",\n});\n\nconst aigne = new AIGNE({ model });\n\nconst teamAgent = TeamAgent.from({\n  skills: [featureExtractor, audienceAnalyzer],\n  mode: ProcessMode.parallel, // This runs both agents at the same time\n});\n\nconst result = await aigne.invoke(teamAgent, {\n  product: \"AIGNE is a No-code Generative AI Apps Engine\",\n});\n\nconsole.log(result);"
  - name: "routerPattern"
    summary: "聚焦路由（Router）模式，用于智能请求分配。说明如何将输入导向合适的代理，给出常见用例，并提供实践代码片段。"
    title: "路由（Router）：智能流量调度器"
    description: "将传入请求智能分发到合适处理方。路由模式充当智能分诊代理，分析用户输入并将其发送到最合适的专用代理。可用于构建智能客服机器人、多功能助手以及始终能做出正确选择的动态系统。"
    code:
      filename: "/examples/workflow-router/example.ts"
      content: "import { AIAgent, AIGNE } from \"@aigne/core\";\nimport { OpenAIChatModel } from \"@aigne/core/models/openai-chat-model.js\";\n\nconst { OPENAI_API_KEY } = process.env;\nconst model = new OpenAIChatModel({ apiKey: OPENAI_API_KEY });\n\nconst productSupport = AIAgent.from({ name: \"product_support\", description: \"Agent to assist with any product-related questions.\" });\nconst feedback = AIAgent.from({ name: \"feedback\", description: \"Agent to assist with any feedback-related questions.\" });\nconst other = AIAgent.from({ name: \"other\", description: \"Agent to assist with any general questions.\" });\n\nconst triage = AIAgent.from({\n  name: \"triage\",\n  instructions: `You are an agent capable of routing questions to the appropriate agent.` ,\n  skills: [productSupport, feedback, other],\n  toolChoice: \"router\", // Set toolChoice to \"router\" to enable router mode\n});\n\nconst aigne = new AIGNE({ model });\n\nconst result = await aigne.invoke(triage, \"How to use this product?\");\nconsole.log(result);\n// { product_support: '...' }"
  - name: "handoffPattern"
    summary: "介绍交接（Handoff）模式，用于创建协作代理团队。说明如何在代理之间转移控制以解决复杂问题，并提供清晰的代码示例。"
    title: "交接（Handoff）：构建代理协作团队"
    description: "某些问题需要多个专家协作。交接模式允许你在专用代理之间顺畅地转移控制。例如，将客户支持查询从通用代理转交给技术专家。旨在创建平滑、协作的工作流，以共同解决复杂问题。"
    code:
      filename: "/examples/workflow-handoff/example.ts"
      content: "import { AIAgent, AIGNE } from \"@aigne/core\";\nimport { OpenAIChatModel } from \"@aigne/core/models/openai-chat-model.js\";\n\nconst { OPENAI_API_KEY } = process.env;\nconst model = new OpenAIChatModel({ apiKey: OPENAI_API_KEY });\n\nfunction transfer_to_b() {\n  return agentB;\n}\n\nconst agentA = AIAgent.from({\n  name: \"AgentA\",\n  instructions: \"You are a helpful agent.\",\n  outputKey: \"A\",\n  skills: [transfer_to_b],\n});\n\nconst agentB = AIAgent.from({\n  name: \"AgentB\",\n  instructions: \"Only speak in Haikus.\",\n  outputKey: \"B\",\n});\n\nconst aigne = new AIGNE({ model });\nconst userAgent = aigne.invoke(agentA);\n\nconst result = await userAgent.invoke(\"transfer to agent b\");\nconsole.log(result);\n// { B: 'Transfer now complete...' }"
  - name: "reflectionPattern"
    summary: "说明反思（Reflection）模式，使代理通过审查和改进实现自我提升。提供使用场景和示例代码，展示如何在编码者与审阅者代理之间创建反馈循环。"
    title: "反思（Reflection）：构建自我改进的代理"
    description: "赋予代理自我纠正的能力。反思模式创建一个迭代循环，由另一个代理审查并改进先前代理的工作。非常适合生成高质量代码、润色文本内容，并构建随着时间改进的系统。"
    code:
      filename: "/examples/workflow-reflection/example.ts"
      content: "import { AIAgent, AIGNE, UserInputTopic, UserOutputTopic } from \"@aigne/core\";\nimport { OpenAIChatModel } from \"@aigne/core/models/openai-chat-model.js\";\nimport { z } from \"zod\";\n\nconst model = new OpenAIChatModel({ apiKey: process.env.OPENAI_API_KEY });\n\nconst coder = AIAgent.from({\n  subscribeTopic: [UserInputTopic, \"rewrite_request\"],\n  publishTopic: \"review_request\",\n  instructions: `You are a proficient coder. You write code to solve problems...`\n});\n\nconst reviewer = AIAgent.from({\n  subscribeTopic: \"review_request\",\n  publishTopic: (output) =>\n    output.approval ? UserOutputTopic : \"rewrite_request\",\n  instructions: `You are a code reviewer. You focus on correctness, efficiency and safety of the code...`\n});\n\nconst aigne = new AIGNE({ model, agents: [coder, reviewer] });\naigne.publish(UserInputTopic, \"Write a function to find the sum of all even numbers in a list.\");\n\nconst { message } = await aigne.subscribe(UserOutputTopic);\nconsole.log(message);"
  - name: "codeExecutionPattern"
    summary: "展示代码执行（Code Execution）模式，用于在安全沙箱中动态运行代码。强调其在自动化方面的能力，并包含示例代码，演示编码代理如何使用沙箱解决问题。"
    title: "代码执行（Code Execution）：让 AI 编写并运行代码"
    description: "解锁高级自动化能力。代码执行模式允许 AI 在安全沙箱中编写并运行自身代码。可用于解决复杂计算、执行数据分析或实时处理算法问题。这不仅是自动化，更是实时的动态智能问题解决。"
    code:
      filename: "/examples/workflow-code-execution/example.ts"
      content: "import { AIAgent, AIGNE, FunctionAgent } from \"@aigne/core\";\nimport { OpenAIChatModel } from \"@aigne/core/models/openai-chat-model.js\";\nimport { z } from \"zod\";\n\nconst model = new OpenAIChatModel({ apiKey: process.env.OPENAI_API_KEY });\n\nconst sandbox = FunctionAgent.from({\n  name: \"evaluateJs\",\n  description: \"A js sandbox for running javascript code\",\n  inputSchema: z.object({ code: z.string() }),\n  process: async (input) => {\n    const { code } = input;\n    const result = eval(code);\n    return { result };\n  },\n});\n\nconst coder = AIAgent.from({\n  name: \"coder\",\n  instructions: `You are a proficient coder. You write code to solve problems and use the sandbox to execute it.` ,\n  skills: [sandbox],\n});\n\nconst aigne = new AIGNE({ model });\n\nconst result = await aigne.invoke(coder, \"10! = ?\");\nconsole.log(result);"
  - name: "otherPatterns"
    summary: "简要介绍其他高级模式，例如编排（Orchestration）和群聊（Group Chat），说明其用途并鼓励开发者查看示例以了解如何协调多个代理完成更复杂的任务。"
    title: "还有更多模式"
    description: "这里列举的并不是全部。AIGNE 还支持更多高级模式，适用于你准备构建更复杂的应用时使用。查看我们的示例以了解这些模式的实际应用。"
    list:
      - title: "Orchestration"
        description: "使用编排代理作为主控指挥，协调一整队专用代理，分派任务并综合结果以完成大规模、多步骤的目标。"
      - title: "Group Chat"
        description: "创建一个多代理共享的虚拟圆桌讨论环境，由群组管理者进行管理。适用于头脑风暴和集体问题解决。"
  - name: "nextSteps"
    summary: "明确且有号召力的下一步操作提示，鼓励开发者通过浏览完整示例库或直接进入入门指南立即开始构建。"
    title: "准备开始构建了吗？"
    description: "你已经了解了这些模式，现在可以将它们付诸实践。获取这些示例、混合使用并开始构建你的 AI 应用。可能性众多，请立即开始。"
    list:
      - title: "Explore All Examples"
        description: "亲自尝试我们的完整示例集。查看这些模式的实际运行方式，并为下一个项目寻找灵感。"
        action:
          text: "查看代码"
          link: "link:///examples"
      - title: "Get Started Guide"
        description: "准备开始构建？我们的分步指南将引导你安装框架并在几分钟内运行第一个代理。"
        action:
          text: "立即开始构建"
          link: "link:///get-started"