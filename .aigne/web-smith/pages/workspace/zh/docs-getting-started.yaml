meta:
  title: "开始使用 AIGNE Framework | 快速入门指南"
  description: "一步步教你安装 AIGNE Framework。设置好环境，几分钟内运行你的第一个 AI 代理！"
sections:
  - sectionName: "heroQuickstart"
    sectionSummary: "一个充满活力的英雄区，立即向开发者展示入门有多简单。包含欢迎标题、鼓励性描述，以及一个简洁完整的代码示例以定下基调。"
    heroTitle: "让我们构建你的第一个 AI 代理！"
    heroDescription: "你即将构建强大的具代理性 AI 应用。本指南帮助你安装并运行第一个 AIGNE 工作流，快速上手。我们开始吧！"
    code:
      filename: "basic-usage.ts"
      content: "import { AIAgent, AIGNE } from \"@aigne/core\";\nimport { OpenAIChatModel } from \"@aigne/openai\";\n\n// Create AI model instance\nconst model = new OpenAIChatModel({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\n// Create AI agent\nconst agent = AIAgent.from({\n  name: \"Assistant\",\n  instructions: \"You are a helpful assistant.\",\n});\n\n// AIGNE: Main execution engine of AIGNE Framework.\nconst aigne = new AIGNE({ model });\n\n// Use the AIGNE to invoke the agent\nconst userAgent = await aigne.invoke(agent);\n\n// Send a message to the agent\nconst response = await userAgent.invoke(\n  \"Hello, can you help me write a short article?\",\n);\nconsole.log(response);"
    sectionBackground: "primary.dark"
  - sectionName: "setupGuide"
    sectionSummary: "清晰的多步骤指南，引导开发者完成先决条件与安装。采用列表布局，便于阅读与执行。"
    title: "准备，出发！"
    description: "入门非常简单！按照以下步骤在你的项目中安装并运行 AIGNE Framework。"
    list:
      - sectionName: "environmentCheck"
        sectionSummary: "用于快速检查环境先决条件的卡片，确保开发者在继续前拥有正确的 Node.js 版本。"
        cardTitle: "第 1 步：检查你的环境"
        cardDescription: "首先确认！你需要 Node.js 版本 20.0 或更高才能开始。这能确保运行顺利。"
        iconifyIconName: "logos:nodejs-icon"
      - sectionName: "installationCommands"
        sectionSummary: "提供可复制粘贴的安装命令，支持 npm、yarn 和 pnpm，方便使用首选包管理器。"
        title: "第 2 步：安装核心包"
        description: "接下来是有趣的部分！选择你喜欢的包管理器，运行下面的命令将 `@aigne/core` 添加到项目中。"
        code:
          name: "npm"
          content: "npm install @aigne/core"
      - sectionName: "runYourFirstAgent"
        sectionSummary: "指南的核心部分，提供一个完整且可运行的示例，展示创建两个互相交互的代理，突显框架的关键特性（移交），以激发开发者兴趣。"
        title: "第 3 步：运行你的第一个代理"
        description: "让你的第一个代理活起来！此示例展示两个代理协作：AgentA 将任务移交给仅用俳句回复的 AgentB。复制此代码，添加你的 OpenAI API 密钥并运行，即可见证效果！"
        code:
          name: "/examples/workflow-handoff/usages.ts"
          content: "import { AIAgent, AIGNE } from \"@aigne/core\";\nimport { OpenAIChatModel } from \"@aigne/openai\";\n\nconst { OPENAI_API_KEY } = process.env;\n\nconst model = new OpenAIChatModel({\n  apiKey: OPENAI_API_KEY,\n});\n\nfunction transferToB() {\n  return agentB;\n}\n\nconst agentA = AIAgent.from({\n  name: \"AgentA\",\n  instructions: \"You are a helpful agent.\",\n  outputKey: \"A\",\n  skills: [transferToB],\n  inputKey: \"message\",\n});\n\nconst agentB = AIAgent.from({\n  name: \"AgentB\",\n  instructions: \"Only speak in Haikus.\",\n  outputKey: \"B\",\n  inputKey: \"message\",\n});\n\nconst aigne = new AIGNE({ model });\n\nconst userAgent = aigne.invoke(agentA);\n\nconst result1 = await userAgent.invoke({ message: \"transfer to agent b\" });\nconsole.log(result1);\n// Output:\n// {\n//   B: \"Transfer now complete,  \\nAgent B is here to help.  \\nWhat do you need, friend?\".\n// }\n\nconst result2 = await userAgent.invoke({ message: \"It's a beautiful day\" });\nconsole.log(result2);\n// Output:\n// {\n//   B: \"Sunshine warms the earth,  \\nGentle breeze whispers softly,  \\nNature sings with joy.  \".\n// }"
    action:
      link: ""
      text: ""
  - sectionName: "nextSteps"
    sectionSummary: "面向未来的号召行动部分，鼓励开发者继续深入，探索更高级主题，如工作流和框架架构。"
    title: "进展顺利！下一步是什么？"
    description: "恭喜，你已成功构建并运行了第一个 AIGNE 应用！这只是可能性的开端。准备深入了解吗？探索我们强大的工作流模式或查看框架的整体架构。"
    ctaBackground: "grey.100"
    ctaActions:
      - text: "探索所有工作流"
        link: "link:///workflows"
      - text: "查看架构"
        link: "link:///docs/architecture"