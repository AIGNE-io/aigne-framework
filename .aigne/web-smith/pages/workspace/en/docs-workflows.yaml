meta:
  title: "AIGNE Workflow Patterns | Sequential, Concurrent, Router & More"
  description: "Discover AIGNE's powerful workflow patterns. Learn how to build sophisticated AI applications using Sequential, Concurrent, Router, Handoff, Reflection, and Code Execution patterns with clear diagrams and code examples."
  image: "mediakit://aigne-framework.png"
sections:
  - name: "hero"
    summary: "A vibrant and engaging introduction to AIGNE's workflow patterns, designed to excite developers about the creative possibilities and power they unlock for building complex AI applications."
    title: "Master Your AI with Powerful Workflow Patterns"
    description: "Stop wrestling with complex logic! AIGNE gives you a dynamic toolkit of workflow patterns to build sophisticated, multi-agent applications with incredible ease. Think of them as your secret playbook for creating AI that just *works*. Let's dive in and see how you can bring your most ambitious ideas to life!"
    action:
      text: "Explore All Examples"
      link: "link:///examples"
  - name: "sequentialPattern"
    summary: "Explains the Sequential workflow pattern, detailing its use case for ordered tasks. It includes a diagram description and a complete code example to demonstrate how to build a step-by-step processing pipeline."
    title: "Sequential: The Step-by-Step Powerhouse"
    description: "Need things done in a perfect, specific order? The Sequential pattern is your new best friend! It creates a clean, predictable pipeline where each agent completes its task before passing the baton to the next. It's fantastic for content creation workflows, multi-stage data processing, and any task that needs a clear, linear flow. You'll love the control and clarity it brings!"
    code:
      filename: "/examples/workflow-sequential/example.ts"
      content: "import { AIAgent, AIGNE, ProcessMode, TeamAgent } from \"@aigne/core\";\nimport { OpenAIChatModel } from \"@aigne/core/models/openai-chat-model.js\";\n\nconst { OPENAI_API_KEY } = process.env;\n\nconst model = new OpenAIChatModel({\n  apiKey: OPENAI_API_KEY,\n});\n\nconst conceptExtractor = AIAgent.from({\n  instructions: `\\\nYou are a marketing analyst. Give a product description, identity:\\n- Key features\\n- Target audience\\n- Unique selling points\\n\\nProduct description:\\n{{product}}`,\n  outputKey: \"concept\",\n});\n\nconst writer = AIAgent.from({\n  instructions: `\\\nYou are a marketing copywriter. Given a block of text describing features, audience, and USPs,\\ncompose a compelling marketing copy (like a newsletter section) that highlights these points.\\nOutput should be short (around 150 words), output just the copy as a single text block.\\n\\nProduct description:\\n{{product}}\\n\\nBelow is the info about the product:\\n{{concept}}`,\n  outputKey: \"draft\",\n});\n\nconst formatProof = AIAgent.from({\n  instructions: `\\\nYou are an editor. Given the draft copy, correct grammar, improve clarity, ensure consistent tone,\\ngive format and make it polished. Output the final improved copy as a single text block.\\n\\nProduct description:\\n{{product}}\\n\\nBelow is the info about the product:\\n{{concept}}\\n\\nDraft copy:\\n{{draft}}`,\n  outputKey: \"content\",\n});\n\nconst aigne = new AIGNE({ model });\n\nconst teamAgent = TeamAgent.from({\n  skills: [conceptExtractor, writer, formatProof],\n  mode: ProcessMode.sequential, // This ensures tasks run one after another\n});\n\nconst result = await aigne.invoke(teamAgent, {\n  product: \"AIGNE is a No-code Generative AI Apps Engine\",\n});\n\nconsole.log(result.content);"
  - name: "concurrentPattern"
    summary: "Details the Concurrent workflow pattern for parallel task execution. It highlights the performance benefits, provides a use case, and includes a code example to show developers how to process multiple tasks simultaneously."
    title: "Concurrency: Unleash Parallel Power"
    description: "Why wait when you can do it all at once? The Concurrency pattern runs multiple independent tasks at the same time, slashing processing time and supercharging your app's efficiency. It's a game-changer for parallel data analysis, multi-dimensional content evaluation, or any scenario where speed is king. Get ready to see your performance soar!"
    code:
      filename: "/examples/workflow-concurrency/example.ts"
      content: "import { AIAgent, AIGNE, ProcessMode, TeamAgent } from \"@aigne/core\";\nimport { OpenAIChatModel } from \"@aigne/core/models/openai-chat-model.js\";\n\nconst { OPENAI_API_KEY } = process.env;\n\nconst model = new OpenAIChatModel({\n  apiKey: OPENAI_API_KEY,\n});\n\nconst featureExtractor = AIAgent.from({\n  instructions: `\\\nYou are a product analyst. Extract and summarize the key features of the product.\\n\\nProduct description:\\n{{product}}`,\n  outputKey: \"features\",\n});\n\nconst audienceAnalyzer = AIAgent.from({\n  instructions: `\\\nYou are a market researcher. Identify the target audience for the product.\\n\\nProduct description:\\n{{product}}`,\n  outputKey: \"audience\",\n});\n\nconst aigne = new AIGNE({ model });\n\nconst teamAgent = TeamAgent.from({\n  skills: [featureExtractor, audienceAnalyzer],\n  mode: ProcessMode.parallel, // This runs both agents at the same time\n});\n\nconst result = await aigne.invoke(teamAgent, {\n  product: \"AIGNE is a No-code Generative AI Apps Engine\",\n});\n\nconsole.log(result);"
  - name: "routerPattern"
    summary: "Focuses on the Router pattern for intelligent request handling. This section explains how to direct inputs to the appropriate agent, provides a common use case, and offers a code snippet for practical implementation."
    title: "Router: Your Intelligent Traffic Director"
    description: "Direct incoming requests like a pro! The Router pattern acts as a smart triage agent, analyzing user input and sending it to the perfect specialized agent for the job. You can build intelligent customer support bots, multi-functional assistants, and dynamic systems that always know the right move. It's effortless, intelligent routing at its best."
    code:
      filename: "/examples/workflow-router/example.ts"
      content: "import { AIAgent, AIGNE } from \"@aigne/core\";\nimport { OpenAIChatModel } from \"@aigne/core/models/openai-chat-model.js\";\n\nconst { OPENAI_API_KEY } = process.env;\nconst model = new OpenAIChatModel({ apiKey: OPENAI_API_KEY });\n\nconst productSupport = AIAgent.from({ name: \"product_support\", description: \"Agent to assist with any product-related questions.\" });\nconst feedback = AIAgent.from({ name: \"feedback\", description: \"Agent to assist with any feedback-related questions.\" });\nconst other = AIAgent.from({ name: \"other\", description: \"Agent to assist with any general questions.\" });\n\nconst triage = AIAgent.from({\n  name: \"triage\",\n  instructions: `You are an agent capable of routing questions to the appropriate agent.` ,\n  skills: [productSupport, feedback, other],\n  toolChoice: \"router\", // Set toolChoice to \"router\" to enable router mode\n});\n\nconst aigne = new AIGNE({ model });\n\nconst result = await aigne.invoke(triage, \"How to use this product?\");\nconsole.log(result);\n// { product_support: '...' }"
  - name: "handoffPattern"
    summary: "Introduces the Handoff pattern for creating collaborative agent teams. It explains how control can be transferred between agents to solve complex problems, complete with a clear code example."
    title: "Handoff: Create Your Agent Dream Team"
    description: "Some problems need a team of experts. The Handoff pattern lets you seamlessly transfer control from one specialized agent to another. Imagine a customer support query being handed from a generalist to a technical expert without a hitch. It’s all about creating smooth, collaborative workflows that solve complex problems, together."
    code:
      filename: "/examples/workflow-handoff/example.ts"
      content: "import { AIAgent, AIGNE } from \"@aigne/core\";\nimport { OpenAIChatModel } from \"@aigne/core/models/openai-chat-model.js\";\n\nconst { OPENAI_API_KEY } = process.env;\nconst model = new OpenAIChatModel({ apiKey: OPENAI_API_KEY });\n\nfunction transfer_to_b() {\n  return agentB;\n}\n\nconst agentA = AIAgent.from({\n  name: \"AgentA\",\n  instructions: \"You are a helpful agent.\",\n  outputKey: \"A\",\n  skills: [transfer_to_b],\n});\n\nconst agentB = AIAgent.from({\n  name: \"AgentB\",\n  instructions: \"Only speak in Haikus.\",\n  outputKey: \"B\",\n});\n\nconst aigne = new AIGNE({ model });\nconst userAgent = aigne.invoke(agentA);\n\nconst result = await userAgent.invoke(\"transfer to agent b\");\nconsole.log(result);\n// { B: 'Transfer now complete...' }"
  - name: "reflectionPattern"
    summary: "Explains the Reflection pattern, which enables agents to self-improve through review and refinement. The section provides a use case and a code example showing how to create a feedback loop between a coder and a reviewer agent."
    title: "Reflection: Build Self-Improving Agents"
    description: "Give your agents the power of self-correction! The Reflection pattern creates an iterative loop where one agent's work is reviewed and refined by another. It’s perfect for generating high-quality code, polishing written content, and building systems that learn and improve over time. Watch your AI get smarter with every single task!"
    code:
      filename: "/examples/workflow-reflection/example.ts"
      content: "import { AIAgent, AIGNE, UserInputTopic, UserOutputTopic } from \"@aigne/core\";\nimport { OpenAIChatModel } from \"@aigne/core/models/openai-chat-model.js\";\nimport { z } from \"zod\";\n\nconst model = new OpenAIChatModel({ apiKey: process.env.OPENAI_API_KEY });\n\nconst coder = AIAgent.from({\n  subscribeTopic: [UserInputTopic, \"rewrite_request\"],\n  publishTopic: \"review_request\",\n  instructions: `You are a proficient coder. You write code to solve problems...`\n});\n\nconst reviewer = AIAgent.from({\n  subscribeTopic: \"review_request\",\n  publishTopic: (output) =>\n    output.approval ? UserOutputTopic : \"rewrite_request\",\n  instructions: `You are a code reviewer. You focus on correctness, efficiency and safety of the code...`\n});\n\nconst aigne = new AIGNE({ model, agents: [coder, reviewer] });\naigne.publish(UserInputTopic, \"Write a function to find the sum of all even numbers in a list.\");\n\nconst { message } = await aigne.subscribe(UserOutputTopic);\nconsole.log(message);"
  - name: "codeExecutionPattern"
    summary: "Showcases the Code Execution pattern for dynamically running code in a secure sandbox. This section highlights its power for automation and includes a code example demonstrating how a coder agent can use a sandbox to solve problems."
    title: "Code Execution: Let Your AI Write and Run Code"
    description: "Unlock the ultimate level of automation! The Code Execution pattern gives your AI the ability to write and run its own code in a secure sandbox. Let it solve complex calculations, perform data analysis, or tackle algorithmic problems on the fly. This isn't just automation; it's dynamic, intelligent problem-solving in real-time."
    code:
      filename: "/examples/workflow-code-execution/example.ts"
      content: "import { AIAgent, AIGNE, FunctionAgent } from \"@aigne/core\";\nimport { OpenAIChatModel } from \"@aigne/core/models/openai-chat-model.js\";\nimport { z } from \"zod\";\n\nconst model = new OpenAIChatModel({ apiKey: process.env.OPENAI_API_KEY });\n\nconst sandbox = FunctionAgent.from({\n  name: \"evaluateJs\",\n  description: \"A js sandbox for running javascript code\",\n  inputSchema: z.object({ code: z.string() }),\n  process: async (input) => {\n    const { code } = input;\n    const result = eval(code);\n    return { result };\n  },\n});\n\nconst coder = AIAgent.from({\n  name: \"coder\",\n  instructions: `You are a proficient coder. You write code to solve problems and use the sandbox to execute it.` ,\n  skills: [sandbox],\n});\n\nconst aigne = new AIGNE({ model });\n\nconst result = await aigne.invoke(coder, \"10! = ?\");\nconsole.log(result);"
  - name: "otherPatterns"
    summary: "Briefly introduces additional advanced patterns like Orchestration and Group Chat, explaining their purpose and encouraging developers to explore the examples to see how they can coordinate multiple agents for even more complex tasks."
    title: "And There's More!"
    description: "The fun doesn't stop here! AIGNE also supports even more advanced patterns for when you're ready to build truly next-level applications. Dive into our examples to see them in action!"
    list:
      - title: "Orchestration"
        description: "Use an Orchestrator agent as a master conductor to coordinate a whole team of specialized agents, delegating tasks and synthesizing results to tackle massive, multi-step objectives."
      - title: "Group Chat"
        description: "Create a virtual roundtable where multiple agents can collaborate in a shared chat environment, moderated by a group manager. It's perfect for brainstorming and collective problem-solving."
  - name: "nextSteps"
    summary: "A clear and energetic call-to-action section that encourages developers to take the next step by exploring the full examples library or jumping into the get-started guide to begin building immediately."
    title: "Ready to Build Something Amazing?"
    description: "You've seen the patterns, now it's time to put them into action! Grab these examples, mix and match them, and start building the AI application you've been dreaming of. The possibilities are endless, so what are you waiting for?"
    list:
      - title: "Explore All Examples"
        description: "Get hands-on with our full collection of examples. See these patterns in action and get inspiration for your next project."
        action:
          text: "See the Code"
          link: "link:///examples"
      - title: "Get Started Guide"
        description: "Ready to build? Our step-by-step guide will have you installing the framework and running your first agent in minutes."
        action:
          text: "Start Building Now"
          link: "link:///get-started"